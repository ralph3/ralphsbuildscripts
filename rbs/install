#!/bin/bash

[ "$(id -u)" != "0" ] && {
  echo "Run me as root please." >/dev/stderr
  exit 1
}

cd "$(dirname $0)" || exit 1
RBSDIR="$PWD"

source "$RBSDIR/shared" || exit 1

[ "$Ralphs_Build_System" != "1" ] && {
  echo "This script can't run on a system that wasn't built by me." >/dev/stderr
  exit 1
}

[ "$USE_SHM_SRCDIR" == "1" ] && {
  SRCDIR=/dev/shm/rbs/work/$W/source
  mkdir -p $SRCDIR
}

do_install(){
  local FLIST DOUP DOINST PVNAME VERSION NOSTRIP \
    BUILDFUNC
  DOUP=
  DOINST=
  NOSTRIP=$(exec_profile $1 DISABLE_STRIP)
  rm -rf $TMPROOT
  mkdir -p $TMPROOT || return 1
  
  exec_build_func(){
    do_build_func(){
      exec_profile $1 build || return 1
      ls ${TMPROOT}/* >&/dev/null || {
        echo "TMPROOT is empty!" >/dev/stderr
        return 1
      }
      if [ -n "$(find $TMPROOT/usr/$LIBSDIR/pkgconfig/*.pc 2>/dev/null)" ]; then
        if [ -z "$(find $TMPROOT/usr/$LIBSDIR/* | sed '/\/pkgconfig/d')" ] && \
        [ -z "$(find $TMPROOT/$LIBSDIR/* 2>/dev/null)" ]; then
          mkdir -p $TMPROOT/usr/share || return 1
          mv $TMPROOT/usr/$LIBSDIR/pkgconfig $TMPROOT/usr/share/ || return 1
          rm -rf $TMPROOT/usr/$LIBSDIR || return 1
        fi
      fi
    }
    do_build_func $1 2>&1 || return 1
    return 0
  }
  
  if [ "$SYSTYPE" == "MULTILIB" ]; then
    set_32bit_vars(){
      BUILD="$BUILD32"
      LIBSDIR="$LIBSDIR32"
      BUILDTARGET="$BUILDTARGET32"
      USE_ARCH="32"
      PKG_CONFIG_PATH=$PKG_CONFIG_PATH32
      export BUILD LIBSDIR USE_ARCH PKG_CONFIG_PATH BUILDTARGET
    }
    set_64bit_vars(){
      BUILD="$BUILD64"
      LIBSDIR="$LIBSDIR64"
      BUILDTARGET="$BUILDTARGET64"
      USE_ARCH="64"
      PKG_CONFIG_PATH=$PKG_CONFIG_PATH64
      export BUILD LIBSDIR USE_ARCH PKG_CONFIG_PATH BUILDTARGET
    }
    if [ "$(exec_profile $1 ONLY32)" == "1" ]; then
      set_32bit_vars
      echo -e "\nBuilding 32BIT Only ${1}...\n"
      exec_build_func $1 || {
        echo -e "\n32BIT build failed for ${1}...\n"
        return 1
      }
    else
      set_64bit_vars
      echo -e "\nBuilding 64BIT (MULTILIB) ${1}...\n"
      exec_build_func $1 || {
        echo -e "\n64BIT build failed for ${1}...\n"
        return 1
      }
      if [ "$(exec_profile $1 DISABLE_MULTILIB)" != "1" ] && \
      [ -n "$(find $TMPROOT -name "$LIBSDIR" -type d | sed '/\/var\//d')" ] || \
      [ "$(exec_profile $1 ENABLE_MULTILIB)" == "1" ]; then
        rm -rf ${TMPROOT}-64 || return 1
        mv $TMPROOT ${TMPROOT}-64 || return 1
        mkdir -p $TMPROOT || return 1
        set_32bit_vars
        echo -e "\nBuilding 32BIT (MULTILIB) ${1}...\n"
        exec_build_func $1 || {
          echo -e "\n32BIT build failed for ${1}...\n"
          return 1
        }
        HERE="$PWD" || return 1
        if [ "$(exec_profile $1 DEFAULT32)" == "1" ]; then
          mv $TMPROOT ${TMPROOT}-32 || return 1
          mv ${TMPROOT}-64 $TMPROOT || return 1
          cd ${TMPROOT}-32 || return 1
          tar cp * | tar xp -C $TMPROOT || return 1
          cd $HERE || return 1
          rm -rf ${TMPROOT}-32
        else
          cd ${TMPROOT}-64 || return 1
          tar cp * | tar xp -C $TMPROOT || return 1
          cd $HERE || return 1
          rm -rf ${TMPROOT}-64
        fi
      fi
    fi
  else
    echo -e "\nBuilding ${1}...\n"
    exec_build_func $1 || {
      echo -e "\nBuild failed for ${1}...\n"
      return 1
    }
  fi
  
  [ -z "$TMPDIR" ] && TMPDIR=/tmp
  mkdir -p $TMPDIR || exit 1
  VERSION=$(exec_profile $1 VERSION)
  FLIST="$ROOT/var/lib/packages/current/$1/filelist"
  if [ -e "$ROOT/var/lib/packages/current/$1" ]; then
    echo -n "Savin' a snapshot of current filesystem..."
    >$TMPDIR/fssnapshot.txt
    for file in $ROOT/var/lib/packages/current/*/filelist; do
      cat $file >> $TMPDIR/fssnapshot.txt
    done
    echo "  Done."
    echo -n "Backing up ${1}'s installed files..."
    >${FLIST}~
    cat $FLIST | sed "s%^/%${ROOT}&%" | while read line; do
      [ -L "$line" ] || [ -f "$line" ] && echo "$line" >> ${FLIST}~
    done
    mv -f ${FLIST}~ $FLIST
    mkdir -p $ROOT/var/lib/packages/backup
    tar cpT $FLIST 2>/dev/null >$ROOT/var/lib/packages/backup/${1}.tar
    DOUP=1
    echo "  Done."
  else
    DOINST=1
    mkdir -p $(dirname $FLIST)
  fi
  cd "$TMPROOT" || exit 1
  for x in doc info man; do
    [ -d "$TMPROOT/usr/$x" ] && [ ! -L "$TMPROOT/usr/$x" ] && {
      mkdir -p $TMPROOT/usr/share
      cp -a $TMPROOT/usr/$x $TMPROOT/usr/share/
      rm -rf $TMPROOT/usr/$x
    }
    [ -d "$TMPROOT/usr/local/$x" ] && [ ! -L "$TMPROOT/usr/local/$x" ] && {
      mkdir -p $TMPROOT/usr/local/share
      cp -a $TMPROOT/usr/local/$x $TMPROOT/usr/local/share/
      rm -rf $TMPROOT/usr/local/$x
    }
  done
  echo -n "Compressing any manpages found..."
  find -type f | grep "/man/" | grep -vh "\.bz2" | grep -vh "\.gz" | grep -vh "\.xz" | while read file; do
    xz -9 "$file"
  done
  find -type l | grep "/man/" | grep -vh "\.bz2" | grep -vh "\.gz" | grep -vh "\.xz" | while read link; do
    NTARG="$(readlink "$link").xz"
    cd "$(dirname "$link")"
    [ -e "$NTARG" ] && {
      BLINK="$(basename "$link")"
      ln -sfn "$NTARG" "${BLINK}.xz"
      rm -f "$BLINK"
    }
    cd "$TMPROOT"
  done
  echo "  Done."
  cd "$TMPROOT"
  if [ "$NOSTRIP" != "1" ]; then
    echo -n "Stripping any binaries found..."
    find -type f | xargs file 2>/dev/null | grep "executable" | grep ELF | cut -f 1 -d : | while read exe; do
      strip --strip-unneeded "$exe"
    done
    libs_list(){
      find -type f | xargs file 2>/dev/null | grep "shared object" | grep ELF | cut -f 1 -d :
      find -type f -name '*.a'
    }
    libs_list | while read lib; do
      strip --strip-debug "$lib"
    done
    echo "  Done."
  fi
  if [ -n "$DOUP" ]; then
    test_profile $1 pre_upgrade && {
      echo "Running ${1}'s pre-upgrade script..."
      exec_profile $1 pre_upgrade || return 1
    }
  elif [ -n "$DOINST" ]; then
    test_profile $1 pre_install && {
      echo "Running ${1}'s pre-install script..."
      exec_profile $1 pre_install || return 1
    }
  fi
  echo "Installing files..."
  tar cp * | tar xp -C $ROOT || return 1
  find | sed 's@^\.@@g' | grep . > $FLIST
  cd $WORKDIR || return 1
  rm -rf $TMPROOT || return 1
  grep "\.new$" $FLIST | while read file; do
    F="$(echo "${ROOT}/$file" | sed 's@\.new$@@')"
    [ ! -e "$F" ] && {
      mv -f "${ROOT}/$file" "$F"
    }
  done
  grep "\.tmpnew$" $FLIST | while read file; do
    F="$(echo "${ROOT}/$file" | sed 's@\.tmpnew$@@')"
    [ ! -e "$F" ] && {
      mv -f "${ROOT}/$file" "$F"
    }
    rm -f ${ROOT}/$file
  done
  [ -f "$TMPDIR/fssnapshot.txt" ] && {
    >$TMPDIR/fscurrent.txt
    for file in $ROOT/var/lib/packages/current/*/filelist; do
      cat $file >> $TMPDIR/fscurrent.txt
    done
    echo "Checking for differences in filesystem..."
    grep -vhFxf $TMPDIR/fscurrent.txt $TMPDIR/fssnapshot.txt | grep . \
      >$TMPDIR/fsdiffs.txt
    rm $TMPDIR/{fscurrent.txt,fssnapshot.txt}
    [ "$(cat $TMPDIR/fsdiffs.txt | wc -l)" != "0" ] && {
      echo "Removing Differences..."
      trash_files $TMPDIR/fsdiffs.txt
    }
    rm -f $TMPDIR/fsdiffs.txt
  }
  if [ -n "$DOUP" ]; then
    test_profile $1 post_upgrade && {
      echo "Running ${1}'s post-upgrade script..."
      exec_profile $1 post_upgrade || return 1
    }
    [ -x "/sbin/ldconfig" ] && {
      ldconfig || exit 1
    }
  elif [ -n "$DOINST" ]; then
    test_profile $1 post_install && {
      echo "Running ${1}'s post-install script..."
      exec_profile $1 post_install || return 1
    }
  fi
  [ -x "/sbin/ldconfig" ] && {
    ldconfig || return 1
  }
  if [ -f "$(dirname $FLIST)/reinstall_me" ]; then
    rm -f $(dirname $FLIST)/reinstall_me || return 1
  fi
  echo "$1 done!"
  exit 0
}

MYNAME=$(basename $0)
BUILDLOGS="$RBSDIR/.cache/buildlogs"

if [ -z "$1" ]; then
  echo "Nothing to do!"
  exit 1
fi

mkdir -p $BUILDLOGS || exit 1

for x in $(find /var/lib/packages/current/*/reinstall_me 2>/dev/null | cut -f6 -d'/'); do
    BUILDLOG="$BUILDLOGS/$x"
    >$BUILDLOG
    INSTFAILED=0
    do_install $x | tee $BUILDLOG && INSTFAILED=$PIPESTATUS
    if [ "$INSTFAILED" != "0" ]; then
      exit 1
    fi
done

for x in $*; do
  if [ ! -d "/var/lib/packages/current/${x}" ] || [ "$MYNAME" == "reinstall" ]; then
    BUILDLOG="$BUILDLOGS/$x"
    >$BUILDLOG
    INSTFAILED=0
    do_install $x | tee $BUILDLOG && INSTFAILED=$PIPESTATUS
    if [ "$INSTFAILED" != "0" ]; then
      exit 1
    fi
  fi
done

exit 0
