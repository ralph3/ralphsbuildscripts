#!/bin/bash

[ -z "$RBSDIR" ] && {
  echo "shared: RBSDIR not set!" >/dev/stderr
  exit 1
}

source /etc/profile || exit 1

PROFILEDIR="$RBSDIR/profiles"
FILESDIR="$RBSDIR/files"
WORKDIR="$RBSDIR/.work"
TMPDIR="$WORKDIR/tmp"
TMPROOT="$WORKDIR/tmproot"
SRCDIR="$WORKDIR/source"
HDSRCDIR="$SRCDIR"
DOWNLOADDIR="$RBSDIR/.cache/downloads"
CONFDIR="$RBSDIR/conf"

TCDIR="/linuxtools"
CTCDIR="/linuxcrosstools"

if [ -z "$ROOT" ]; then
  ROOT="/"
fi

gnome_mirrors(){
local V
V=$(echo $VERSION | cut -f-2 -d'.')
cat << EOF
http://ftp.belnet.be/mirror/ftp.gnome.org/sources/$1/$V/$TARBALL
http://mirror.aarnet.edu.au/pub/GNOME/sources/$1/$V/$TARBALL
http://ftp.gnome.org/pub/GNOME/sources/$1/$V/$TARBALL
EOF
}

gnu_mirrors(){
cat << EOF
http://ftp.gnu.org/gnu/$1/$TARBALL
ftp://ftp.ibiblio.org/pub/mirrors/gnu/ftp/gnu/$1/$TARBALL
ftp://ftp.cse.ohio-state.edu/mirror/gnu/$1/$TARBALL
EOF
}

gnome_script(){
  local SCHEMAS FILELIST DO MIMEDIR
  FILELIST="$(ls -d /var/lib/packages/current/${1} 2>/dev/null | sed q)/filelist"
  [ -z "$1" ] || [ -z "$2" ] && {
    echo "usage: gnome_script <pkgname> {install|remove}" >/dev/stderr
    return 1
  }
  [ ! -f "$FILELIST" ] && {
    echo "err in gnome_script(): $1 isn't installed." >/dev/stderr
    return 1
  }
  case $2 in
    "install")
      DO="install"
    ;;
    "remove")
      DO="uninstall"
    ;;
    *)
      echo "err in gnome_script(): \$2 should be install or remove, not ${2}." >/dev/stderr
      return 1
    ;;
  esac
  eval "SCHEMAS=($(cat $FILELIST | grep "\.schemas$" | sed 's@^@\"@g;s@$@\"@g'))"
  [ -n "$SCHEMAS" ] && {
    gconftool-2 --version >/dev/null || return 1
    export GCONF_CONFIG_SOURCE="$(gconftool-2 --get-default-source)"
    for schema in "${SCHEMAS[@]}" ; do
      gconftool-2 --makefile-${DO}-rule "$schema" >&/dev/null
    done
  }
  eval "SCROLLS=($(cat $FILELIST | grep "\.omf$" | sed 's@^@\"@g;s@$@\"@g'))"
  [ -n "$SCROLLS" ] && {
    for scroll in "${SCROLLS[@]}" ; do
      scrollkeeper-${DO} -q -p /var/lib/scrollkeeper "$scroll" || return 1
    done
  }
  [ -n "$(cat $FILELIST | grep "\.desktop$")" ] && {
    update-desktop-database -q || return 1
  }
  MIMEDIR="$(cat $FILELIST | grep "share/mime$" | sed q)"
  [ -d "$MIMEDIR" ] && {
    update-mime-database $MIMEDIR || return 1
  }
  return 0
}

unset_profile(){
  local N
  unset VERSION DIR TARBALL SYS_VERSION MD5SUMS DEPENDS preinstall postinstall \
    preremove postremove preupgrade postupgrade Cross_Tools_Build Tools_Build build
  N=1
  while [ "$N" -le "50" ]; do
    unset SRC${N} my_src${N}
    N=$((N+1))
  done
}

exec_profile(){
  if [ ! -f "$PROFILEDIR/$1" ]; then
    echo "no profile for ${1}!" >/dev/stderr
    return 1
  fi
  unset_profile $1
  source $PROFILEDIR/$1 || return 1
  if [ "$2" == "DEPENDS" ]; then
    for x in ${DEPENDS[@]}; do
      echo $x
    done
    return 0
  fi
  case $(type -t $2) in
    "function")
      $2 || return 1
    ;;
    *)
      if [ -n "$(eval "echo \$$2")" ]; then
        eval "echo \$$2"
      else
        return 1
      fi
    ;;
  esac
}

test_profile(){
  unset_profile $1
  source $PROFILEDIR/$1 2>/dev/null || return 1
  case $(type -t $2) in
    "function")
      return 0
    ;;
    *)
      if [ -n "$(eval "echo \$$2")" ]; then
        return 0
      else
        return 1
      fi
    ;;
  esac
  unset_profile $1
}

trash_files(){
  local FILELIST E
  eval "FILELIST=($(cat $1 | sed 's@^@\"@g;s@$@\"@g'))"
  for file in "${FILELIST[@]}"; do
    [ -f "$file" ] && [ ! -L "$file" ] && {
      echo "Remove File      -> $file"
      rm -f "$file"
    }
    [ -L "$file" ] && {
      echo "Remove Symlink   -> $file"
      rm -f "$file"
    }
  done
  while true; do
    E=
    for file in "${FILELIST[@]}"; do
      [ -d "$file" ] && {
        ls "${file}"/* >&/dev/null || {
          echo "Remove Empty Dir -> $file"
          rm -rf "$file"
          E=1
        }
      }
    done
    [ -z "$E" ] && break
  done
}

md5sum_file(){
  md5sum $1 2>/dev/null | cut -f1 -d' '
}

download(){
  local HOST URL URL SFSUF R DOWGET BN TN
  HOST=`echo $1 | cut -f3- -d'/' | cut -f1 -d'/'`
  BN="$(basename $1)"
  case $HOST in
    "prdownloads.sourceforge.net")
      SFSUF=`echo $1 | rev | cut -f-2 -d '/' | rev`
      for sfhost in optusnet switch puzzle heanet kent jaist ovh \
        cogent belnet nchc; do
        URL="http://${sfhost}.dl.sourceforge.net/sourceforge/$SFSUF"
        R=`wget --server-response --spider $TURL 2>&1 | grep "Content-Type: text/html"`
        [ "$R" = "" ] && {
          wget --passive-ftp -O `basename $URL` $URL && return 0
        }
      done
cat << EOF >/dev/stderr

  ERROR: Unable to find a sourceforge mirror for $SFSUF.

EOF
      rm -f "$BN"
      return 1
    ;;
    *)
      TN=$(mktemp)
      wget --passive-ftp -O "$TN" $1 || {
        rm -f "$TN"
        return 1
      }
      mv -v $TN $BN || return 1
      chmod 644 $BN || return 1
    ;;
  esac
  return 0
}

list_sources(){
  local N SRC F M TN
  for app in $*; do
    unset_profile
    if [ ! -f "$PROFILEDIR/$app" ]; then
      echo "No profile for $app exists!" >/dev/stderr
      return 1
    fi
    source $PROFILEDIR/$app || return 1
    echo $TARBALL
    N=1
    while true; do
      eval "SRC=( \$(for x in \"\${SRC$N[@]}\"; do echo "\"\$x\""; done) )"
      [ -z "$SRC" ] && break
      for addr in "${SRC[@]}"; do
        echo "$(basename "$addr")"
        break
      done
      N=$((N+1))
    done
  done
}

download_sources(){
  local N SRC F M TN
  mkdir -p $DOWNLOADDIR || return 1
  for app in $*; do
    unset_profile
    if [ ! -f "$PROFILEDIR/$app" ]; then
      echo "No profile for $app exists!" >/dev/stderr
      return 1
    fi
    source $PROFILEDIR/$app || return 1
    cd $DOWNLOADDIR || return 1
    test_profile $app my_src1
    if [ "$?" == "0" ]; then
      if [ ! -e "$DOWNLOADDIR/$TARBALL" ]; then
        download "http://192.168.0.1/rbs-sources/$TARBALL"
        if [ "$?" != "0" ]; then
          rm -rf $TMPDIR || return 1
          mkdir -p $TMPDIR || return 1
          cd $TMPDIR || return 1
          echo "Running my_src1 for ${app}..."
          my_src1 || return 1
          echo "Cleaning up..."
          rm -rf $TMPDIR || return 1
          echo "Done. :)"
        fi
      fi
    fi
    N=1
    while true; do
      eval "SRC=( \$(for x in \"\${SRC$N[@]}\"; do echo "\"\$x\""; done) )"
      [ -z "$SRC" ] && break
      M=${MD5SUMS[$((N-1))]}
      for addr in "${SRC[@]}"; do
        F=$(basename "$addr")
        [ -e "$F" ] && {
          [ -e "${F}.ok" ] || [ "$(md5sum_file $F)" == "$M" ] || [ "$M" == "0" ] && break
        }
        cd $DOWNLOADDIR || return 1
        download "http://192.168.0.1/rbs-sources/$(basename $addr)" || \
          download "$addr"
      done
      [ ! -e "${F}.ok" ] && {
        if [ -e "$F" ]; then
          FM=$(md5sum_file $F)
          [ "$M" == "0" ] && {
            echo -en "Your md5sum for $F is $FM\n\nPress enter to continue..."
            read
          }
          [ "$M" != "0" ] && [ "$FM" != "$M" ] && {
            echo -e "\n\nMD5SUM Mismatch:\n\n ${F} reads ${FM}\nProper MD5SUM is ${M}" >/dev/stderr
            return 1
          }
          [ "$FM" == "$M" ] && {
            >${F}.ok
          }
        else
          echo "error downloading file -> $F" >/dev/stderr
          return 1
        fi
      }
      N=$((N+1))
    done
  done
}

unpack_tarball(){
  local TARBALL
  if [ -e "$FILESDIR/$1" ]; then
    TARBALL="$FILESDIR/$1"
  elif [ -e "$DOWNLOADDIR/$1" ]; then
    TARBALL="$DOWNLOADDIR/$1"
  else
    echo "The tarball ${1} not found!" >/dev/stderr
    return 1
  fi
  echo "Unpacking $(basename $1)..."
  mkdir -p $SRCDIR || return 1
  tar xpfJ $TARBALL -C $SRCDIR >&/dev/null || \
  tar xpfj $TARBALL -C $SRCDIR >&/dev/null || \
  tar xpfz $TARBALL -C $SRCDIR || return 1
  find $SRCDIR -exec touch -c -t 197101010000.00 {} \;
  return 0
}

set_multiarch(){
  if [ "$SYSTYPE" == "MULTILIB" ] && [ "$ONLY32" != "1" ]; then
    if [ "$DISABLE_MULTILIB" != "1" ] || [ "$ENABLE_MULTILIB" == "1" ]; then
      for exe in $*; do
        n="<TMPROOT>/$(echo $exe | sed "s%^${TMPROOT}/%%")"
        echo -n "Move: $n to ${n}-${USE_ARCH}..."
        mv $exe ${exe}-$USE_ARCH || return 1
        echo "  Done."
        echo -n "Link: $n to /usr/bin/multiarch_wrapper..."
        ln -sfn /usr/bin/multiarch_wrapper $exe || return 1
        echo "  Done."
      done
    fi
  fi
  return 0
}
